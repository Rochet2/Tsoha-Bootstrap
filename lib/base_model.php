<?php

class BaseModel{
  public function __construct($attributes = null) {
    $this->set_attributes($attributes);
  }

  // if given param is an array, sets the attributes / properties
  // of the model instance from that array
  public function set_attributes($attributes = null) {
    if (!is_array($attributes))
      return;
    // Käydään attribuutit läpi
    foreach (get_object_vars($this) as $attribute => $value) {
      // Jos attribuutti on olemassa ja on attribuuttilistassa...
      if (property_exists($this, $attribute) && array_key_exists($attribute, $attributes)) {
        // ... lisätään avaimen nimiseen attribuuttin siihen liittyvä arvo
        $this->{$attribute} = $attributes[$attribute];
      }
    }
  }

  // a default validator for all name columns
  public function validate_name() {
      $errors = array();
      if (!is_string($this->name)) {
          $errors[] = "name must be a string";
      } elseif (strlen(trim($this->name)) < 1) {
          $errors[] = "name can not be empty";
      }
      return $errors;
  }

  // returns an array containing all errors (strings) from validations done on the instance of the model
  public function errors(){
    $errors = array();
    foreach (get_object_vars($this) as $attribute => $value) {
      if (method_exists($this, "validate_".$attribute)) {
        $errors = array_merge($errors, $this->{"validate_".$attribute}());
      }
    }
    return $errors;
  }

  // returns the table name, more specificly class name in lowercase
  public static function tablename() {
    return strtolower(get_class(static::newself()));
  }

  // returns an array of instaces of the model that have the field match the value
  public static function find_by($field, $val) {
    $query = DB::connection()->prepare('SELECT * FROM "'.static::tablename().'" WHERE '.$field.' = :'.$field);
    $query->execute(array($field => $val));
    $rows = $query->fetchAll();

    $collection = array();
    foreach($rows as $row){
      $collection[] = static::newself($row);
    }
    return $collection;
  }

  // returns null or a single instance of the model if found with given id
  public static function find($id) {
    $query = DB::connection()->prepare('SELECT * FROM "'.static::tablename().'" WHERE id = :id LIMIT 1');
    $query->execute(array('id' => $id));
    $row = $query->fetch();

    if (!$row) {
      return null;
    }
    return static::newself($row);
  }

  // returns an array of all instances of the model
  public static function all() {
    $query = DB::connection()->prepare('SELECT * FROM "'.static::tablename().'"');
    $query->execute();
    $rows = $query->fetchAll();

    $collection = array();
    foreach($rows as $row){
      $collection[] = static::newself($row);
    }
    return $collection;
  }

  // saves the instance of the model to DB as a new row.
  // sets the instance's id to the new id generated by DB
  public function save(){
    $attrs = get_object_vars($this);
    // do not save id, should be new object
    unset($attrs['id']);
    $attrs_list_field = join(', ', array_keys($attrs));
    $attrs_list_value = ':'.join(', :', array_keys($attrs));
    $query = DB::connection()->prepare('INSERT INTO "'.static::tablename().'" ('.$attrs_list_field.') VALUES ('.$attrs_list_value.') RETURNING id');
    $query->execute($attrs);
    $row = $query->fetch();
    $this->id = $row['id'];
  }

  // updates the DB row for the instance of the model if possible
  // with the new values
  public function update(){
    $attrs = get_object_vars($this);
    unset($attrs['id']);
    $fields = array();
    foreach (array_keys($attrs) as $name) {
      $fields[] = $name.' = :'.$name;
    }
    $fields = join(', ', $fields);
    $query = DB::connection()->prepare('UPDATE "'.static::tablename().'" SET '.$fields.' WHERE id = :id');
    $query->execute(get_object_vars($this));
  }

  // deletes the instance of the mode from DB if possible.
  public function delete(){
    $query = DB::connection()->prepare('DELETE FROM "'.static::tablename().'" WHERE id = :id');
    $query->execute(array("id" => $this->id));
  }

}
